Prepare the example project "BFT" as described in UG888.

Begin with Lab1 "Using the non-Project Design Flow"

Within Step1: Examine the Example Script

- In the Tcl Script (.../create/bft_kintex7_batch.tcl):

  - which are Tcl comments?

  - which are ordinary Tcl commands?
  
  - which are commands added by Vivado?
  
  - which are Vivado commands disabled by comments?
  
- For all Vivado commands, also those in comment, lookup
  their description in UG835
  
- For all Tcl commands locate their description in some Tcl
  documentation (like the ActiveState HELP or in the online
  manual stored http://www.tcl.tk)
  
Within Step2: Starting Vivado with the Example Design

- Display the working directory BEFORE and AFTER executing
  Sub-Step 2
  
  - Which Tcl command do you need for that purpose?
  
  - Lookup its description in BOTH, the Active State Online
    help AND ALSO in the online manual manual in the internet.
	
  - Do the descriptions differ from each other?
  
  - How could you store the current working directory, as
    returned by Tcl's pwd command in a Tcl variable?
	
  - How would you return to that directory AFTER executing
    Sub-Step 2?
	
- How could you "look around" in the working directory (e.g.
  which files are present) INTERACTIVELY using Tcl commands
  only.
  
  Hint: Tcl-command glob - look-up its description in some
  easily available documentation)
  
- For one of the files you find, display some additional
  information, like its size or its creation or modification
  time.
  
  Hint: Tcl-command file - look-up its documentation ...
  
- Turn one of some file's time stamp into a human readable form.

  Hint: Tcl-command clock - look-up its description ...
  
  - Display the "human readable time stamp" in its default form.

  - Display it in "YYYY-MM-DD hh:mm:ss" form.
	
- Can you get a list of "cells" now, maybe an empty one,
  before or after you executed Sub-Step 2?

  - If not, what is in the error message?
    
  - If yes, how many cells does it contain?
  
  - How could a Tcl script avoid being abor1ted, if it tried
    to get cells from a design but there are none?
	
- Repeat the above after Sub-Step 3

Within Step3: Synthesizing the Design

- If you could NOT get a list of cells, from which Sub-Step on
  can you get one?
  
- If you COULD already display a list of cells before, does any
  Sub-Step change it?
  
- Look-up the description of the get_cells command in some UG835

  - Especially how changes its behaviour iwhen the "-hierarchical"
    option is used?
  
  - What is the difference to the option "-hier" - or isn't there
    any difference?
  - Try some of its options to return only cells with certain
    properties.
	
  - Store what it returned in a Tcl variable.
  
  - Use the appropriate Tcl list-commands (interactively) to
  
    - Access some elements of the list (first, last, second last
	  etc.)
	  
	- Split the list into sublist-s, storing the results into Tcl
	  variables and examine the sublists with Tcl list commands.
	  
	- Append an element from one list to an another one.
	
	- Can you also append a plain string (no cell object from the
	  design) to a list of cell objects?
	  
	  - If not, why not, it yes, how can you find a the element
	    type (i.e. design object or just a plain string?
	
- For all the Vivado Tcl commands used in Sub-Step 3 look-up their
  description in UG835
  
  - To which of the following targets can you redirect a report:
  
    - To a file?
	- To a variable?
	- To a special window?
	(Try out any of the above that is possible!)
	
  - How can you limit the content of a report?
  
After Sub-Step 5:

  - Use the Tcl commands file and clock to get the modification time
    of all the generated reports, stored in files according to the
	original lab.
	
    - How can you decide which one is the newest?
	- Do you actually need the Tcl command clock to do that.
	- Determine which (report) file is oldest and which newest.
	- How mach time has passed between both time stamps?
	- Regenerate the newest report but KEEP THE OLDEST UNTOUCHED
	- Check that the time span between the newest and oldest now
      has increased.

  - Start an Editor of your choice (for Windows recommended: Notepad++)
  
    - write a single line into it:
	  puts "HERE-I-AM"
	- save it into the file "list_reports.tcl" IN THE WORKING
      DIRECTORY of your Vivado Tcl console
 
  - Back to the Vivado Console (but leave the editor window open)

    - check that the file "list_reports.tcl" now actually exists
	  where you have stored (Command hint: file exists ...)
	- run the command stored in list_reports.tcl by using
	  source list_reports.tcl

NOTE: If you do not get the output HERE-I-AM but anything else
      happens, either fix the error (if you see any) or ask the
	  tutor.

	- run it ones more using
	  sourc list_reports.tcl
	  sour list_reports.tcl
	- how many more letters can leave out before you get an error?)
	  (Hint: use command info proc so* and you will see the problem)

  - Back to the editor (window)
  
    - change your file as follows:
	  proc list_reports {} {
	      puts HERE-I-AM
	  }
	- save it back (again into the file "list_reports.tcl", i.e.
	  overwrite the existing one)
	  
  - Back to the Vivado Console (but leave the editor window open)
  
    - again use the command
	  source list_reports
	  (you may also fetch it from the command history or use the
	  shortest unique abbreviation, if you like)
	- WHY doesn't happen any thing right away
	- call the sub-routine by using
	  list_reports
	- check the current definition of your sub-routine by using
	  info body list_reports
	
    	
- Back to the editor (window)
  
    - change your file as follows:
	  proc list_reports {} {
	      glob $::outputDir/*.rpt
	  }
		
- Back to the Vivado Console (but leave the editor window open)

    - source the list_reports.tcl
	- check by using
	  info body list_reports
	  that the definition now is different
	- call the sub-routine by using
	  list_reports

NOTE: The last two steps will not be mentioned any more in future.
      It should become obvious now how you test list_reports after
	  you made any changes to list_reports.txt! Also - of course -
	  you need not check anytime you source the definition of
	  list_reports from the file list_reports.tcl that its body
	  actually has changed.
 
- Back to the editor (window)

    - change the proc definition of list_reports so that it
	  - (1st step) list the name of all reports on output
	  - (2nd step) adds in a first column the modification time
	     YYYX-MM-DD hh:mm:ss
	  - (OPTIONAL 3rd step) sorts the files newest first, oldest last
	  
Hint for the 3rd step: first write the mtime and the file name in
a list, where each element is itself a two-element list, consisting
of the modification time and and the file name. Then look up to find
how lsort can sort a "list of lists" and use one element from the
NESTED list as sort key (comparison criteria).
	  
- Back to the Vivado Console (but leave the editor window open)

    - test the modifications you made to list_reports.tcl
	
- Back to the editor (window)

NOTE: this step is optional! So if you are short in time continue
at SKIP-UPTO-HERE.
	
	- adapt the list_rerports function with an argument that may
	  have one of the four values:
	  -by_name
	  -by_name_reverse
	  -by_mtime
	  -by_mtime_reverse
	  and produce the file names it the list of reports acording to
	  that order. I.e. the basic frame is now:
	  
	  proc list_reports {sort_order} {
	      switch -excat -- $sort_order {
		      ... TO BE DONE ..
		  }
	  }
	  
NOTE: Try to get accustomed to look-up missing information in the
      appropriate manuals - which for the switch statement is the
	  Tcl command reference (Active State HELP or http://tcl.tk).
	  Please do NOT try to locate everything relevant for the labs
	  in the printed presentation for the course YOU MIGHT NOT FIND
 	  IT THERE! The presentation is just the "Golden Thread" for
	  the topics to be covered, NOT a precisely selected and compiled
	  "Knowledge Base" for all of the labs.

      ONCE MORE: Learn that you NEED to consult the manuals now and
	  then. Back at work nobody will go ahead and select for you from
	  the broad range of informations available just the things you need
	  to know for the task at hand. Yes, real life can be hard and will
	  sometimes be far from being a cosy kindergarden. (Also note that
	  while you attend to this course, in case you get stuck you can
	  always request help from your tutor - THAT'S HIS JOB!)
	  
- Test in the Vivado shell, if it works, come back to here

    - Make -by_name the default value for the argument sort_order.

- Test in the Vivado Shell that list_reports can now be called with
  either one or two arguments and behaves correctly (i.e. sorts by
  name if there is no argument)
  
- Back to the editor (window)

    - Again change the arguments for list_reports as follows:
	  proc list_reports {args} {
	     # TO BE DONE
		 switch ... {
		     # simiolar to the former but not
		 }
	  }
	- Add the appropriate logic (inside list_reports) to make the
	  following uses valid:
	  list_reports                         ;# sort by name, forward
	  list_reports -sort_by_name           ;# as before
	  list_reports -sort_by_name -reverse  ;# sort by name, reverse
	  list_reports -reverse -sort_by_name  ;# as before
	  list_reports -reverse                ;# as before
	  list_reports -by_mtime               ;# sort by mtime
	  list_reports -by_mtime -reverse      ;# sort by mtime, reverse
	  list_reports -reverse -sort_by_mtime ;# as before
	  
    If up to here nothing was a real challenge to you, try your hands
	at the following:
	
	- Come up with sort order for
	  list_reports -sort_by_name -sort_by_mtimne  ;# [1]
	  list_reports -sort_by_mtime -sort_by_name   ;# [2]
	  which is meaningful (and where (1) and (2) is not the same!)
	- and (maybe) allow to -reverse that order too.
	
==== SKIP-UP-TO-HERE (Landing Zone) ====
	  
- Back to the editor (window)

    - Write a sub-routine
	  proc find_in_report {fname {pattern {.*}}} {
	      # ... TO BE DONE (see below)
	  }
	- For the moment leave it empty, save it into a NEW file
	  (find_in_report.tcl) and remember that in the Vivado shell
	  from now on you need to source another file for testing
	  
- Back to the Vivado Console (but leave the editor window open)

    - test the modifications you made so far ...
	
- Back to the editor (window)

    - Now fill the new sub-routine with the appropriate
	  functionality, so that it
	  
	  - open-s the file with the name specified in the fname argument
	  - reads in a loop each line, until end of file
	      compares each line read with the variable pattern,
		  using the Tcl command regexp
		      printing the line (only) when it matches
	  - close-s the file at the end
	  
    Hint: the basic frame for the above is following:
    set fd [open $fname r]
	while {[gets $fd line] >= 0} {
	    if {[regexp $pattern $line]}
		    puts $line
	}
	close $fd
	
- Back to the Vivado Console

  - test find_in_report with a report and patterns of your choice

  - if all is running and well and you still aren't tired add some
    sufficient robustnes to the above code snippet by	
    - catching attempts to open non-existing files;
    - fixing the problem of regular expressions which start with a
      '-' sign.
		
  Hint: The second modification is much easier than the first, which
  isn't THAT difficult but you need to add a catch command in the
  appropriate ways (so RTFM or get support from the tutor).
  
DONE

